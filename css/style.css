/* Editing panel style */
.panel {
	background: #fff;
	border-color: #d8d8d8;
}

/* Below styles for container layout - referencing http://benfrain.com/independent-scrolling-panels-body-scroll-using-just-css/ */

/* Stops generic page scrolling/wiggling */
body {
    overflow-x: hidden;
    overflow-y: hidden;
    padding: 0;
    margin: 0;
}

/*Flexbox gives us the flexiness we need. The top just stays put as there is no scrolling on the body due to the page never exceeding viewport height*/
.top {
    display: flex;
    background-color: #f2f2f2;
}

/*This is our main wrapping element, it's made 100vh high to ensure it is always the correct size and then moved into place and padded with negative margin and padding*/
.main-container {
    display: flex;
    overflow: hidden;
    height: 100vh;
    margin-top: -100px;
    padding-top: 100px;
    position: relative;
    width: 100%;
    backface-visibility: hidden;
    will-change: overflow;
}

/*All the scrollable sections should overflow and be whatever height they need to be. As they are flex-items (due to being inside a flex container) they could be made to stretch full height at all times if needed.
WebKit inertia scrolling is being added here for any present/future devices that are able to make use of it.
*/
.left,
.right {
    overflow: auto;
    height: auto;
    padding: .5rem;
    -webkit-overflow-scrolling: touch;
    -ms-overflow-style: none;
    border-style: solid 1px;
    border-color: #f2f2f2;
    background-color: #f2f2f2;
}

/*Entirely optional â€“ just wanted to remove the scrollbar on WebKit browsers as I find them ugly*/
.left::-webkit-scrollbar,
.right::-webkit-scrollbar {
    display: none;
}

.left {
    flex: 1;
}

.right {
    width: 65%;
}